using System;
using System.Threading;
using System.Threading.Tasks;
using Contracts;
using Domain.Entities;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Services.Abstractions;

namespace Presentation.Controllers;

[ApiController]
[Route("api/account")]
public class AccountController : ControllerBase
{
    readonly IServiceManager _serviceManager;
    readonly UserManager<User> _userManager;

    public AccountController(IServiceManager serviceManager, UserManager<User> userManager)
    {
        _serviceManager = serviceManager;
        _userManager = userManager;
    }

    [HttpPost("create")]
    public async Task<IActionResult> CreateUser(Guid organisationId,
        [FromBody] UserForCreationDto userForCreationDto, CancellationToken cancellationToken)
    {
        try
        {
            var response =
                await _serviceManager.UserService.CreateAsync(organisationId, userForCreationDto,
                    cancellationToken);

            return new OkObjectResult(response);
        }
        catch (Exception e)
        {
            return BadRequest(e.Message);
        }
    }


    [HttpPost("login")]
    public async Task<ActionResult> Login([FromBody] UserLoginDto userLoginDto,
        CancellationToken cancellationToken)
    {
        try
        {
            var response = await _serviceManager.UserService.LoginAsync(userLoginDto, cancellationToken);

            return new OkObjectResult(response);
        }
        catch (Exception e)
        {
            return BadRequest(e.Message);
        }
    }

    [HttpPost("ForgotPassword")]
    public async Task<ActionResult<string>> ForgotPassword(string email, CancellationToken cancellationToken)
    {
        // INFO: This Method is depending on your UI environment, so it is not implemented here
        throw new NotImplementedException();

        // Generally you should send an email to the user with a link to reset the password
        // The link should contain the user id and a code to reset the password
        // The link should be something like this:
        // https://localhost:5001/Account/ResetPassword?userid=USERID&code=CODE
        // The code is generated by the following method:
        // var code = await _userManager.GeneratePasswordResetTokenAsync(user);
        // The code is valid for 24 hours
        // Additionally you can send the user to a confirmation page, that the email was sent
        // You can find more information about the password reset process here:
        // https://learn.microsoft.com/en-us/aspnet/core/security/authentication/accconfirm?view=aspnetcore-6.0&tabs=visual-studio
    }

    [HttpPost("ResetPassword")]
    public async Task<IActionResult> ResetPassword(string email, string code, string password,
        CancellationToken cancellationToken)
    {
        throw new NotImplementedException();

        // This method is called when the user entered a new password in the reset password form

        // The code is generated by the following method:
        // var user = await _userManager.FindByEmailAsync(model.Email);
        // await _userManager.ResetPasswordAsync(user, model.Code, model.Password);

        // Then redirect to the ResetPasswordConfirmation Page or to the Login Page
    }

    [HttpPost("SendConfirmationEmail")]
    public async Task<ActionResult> SendConfirmationEmail(string userId)
    {
        throw new NotImplementedException();
        // this method has to be implemented depending on your UI environment

        // The following code is just an example how to send an email with the confirmation link
        var user = await _userManager.FindByIdAsync(userId);
        var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);

        var callbackUrl = "a callback url";
        var message =
            $"Confirm your email Please confirm your account by clicking this link: <a href='{callbackUrl}'>link</a>";
        var smtpSettings = new SmtpSettings("host.server.xyz", "AuthUsername", "password");
        var messageSettings = new MessageSettings("Receiver Name", "toEmail@address.com", "Subject", message,
            "Sender Email", "Sender Name");

        await _serviceManager.EmailService.SendEmailAsync(messageSettings, smtpSettings);


        // Send User to a confirmation page, that the email was send

        return new OkObjectResult("Success");
    }

    [HttpGet("ConfirmEmail")]
    public async Task<ActionResult> ConfirmEmail(string userId, string code)
    {
        var user = await _userManager.FindByIdAsync(userId);
        var result = await _userManager.ConfirmEmailAsync(user, code);

        if (result.Succeeded)
            return new OkObjectResult("Success");
        return new BadRequestObjectResult("Error");
    }

    #region Endpoints for testing purposes

    [HttpGet("AuthorizationTest")]
    [Authorize]
    public ActionResult<string> AuthorizationTest()
    {
        if (Response.StatusCode == 401) return new UnauthorizedResult();

        return new OkObjectResult("Success");
    }

    [HttpGet("RoleTest")]
    [Authorize(Roles = "OrgUser")]
    public ActionResult<string> RoleTest()
    {
        if (Response.StatusCode == 401) return new UnauthorizedResult();

        return new OkObjectResult("Success");
    }

    #endregion
}